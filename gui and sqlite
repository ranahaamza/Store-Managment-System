from tkinter import *
import sys
import sqlite3

conn = sqlite3.connect('new_database.db')
c = conn.cursor()

#ADD Inventory Management
def clickedbtn1(window):
    window.destroy()
    inventory_management_window = Tk()
    inventory_management_window.geometry('350x200')
    inventory_management_window.title("Inventory Management")
    btn1 = Button(inventory_management_window, text="ADD New", fg="red", command=lambda: add_new_button(inventory_management_window))
    btn1.grid(column=1, row=1)
    btn2 = Button(inventory_management_window, text="Update Existing", fg="red", command=lambda: update_existing(inventory_management_window))
    btn2.grid(column=1, row=3)
    def back():
        inventory_management_window.destroy()
        mai()
    # Back Button
    btn2 = Button(inventory_management_window, text="Back", fg="red", command=back)
    btn2.grid(column=0, row=5)
    inventory_management_window.mainloop()

# creating table
def create():
    conn = sqlite3.connect('new_database.db')
    c = conn.cursor()
    c.execute(
        "CREATE TABLE IF NOT EXISTS items(id integer primary key autoincrement, name TEXT, sqltime TIMESTAMP default CURRENT_TIMESTAMP NOT NULL)")
    print("data table created")
    # inventory table
    c.execute('''CREATE TABLE IF NOT EXISTS inventory(
                inventory_id integer primary key autoincrement,
                quantity INTEGER NOT NULL,
                invoice_price INTEGER NOT NULL,
                item INTEGER,
                FOREIGN KEY (item) REFERENCES data(id)
            );''')
    print("inventory table created")
    conn.commit()
    conn.close()
create()

#ADD New
def add_new_button(inventory_management_window):
    inventory_management_window.destroy()
    add_new_button = Tk()
    def click(event):
        nameEntered.configure(state=NORMAL)
        nameEntered.delete(0, END)
    add_new_button.geometry('350x200')
    add_new_button.title("ADD New Items")
    name = StringVar()
    nameEntered = StringVar()
    nameEntered = Entry(add_new_button, width=15, textvariable=nameEntered)
    nameEntered.grid(column=1, row=1)
    nameEntered.insert(0, 'Enter name of product')
    nameEntered.configure(state=DISABLED)
    nameEntered.bind("<Button-1>", click)
    nameEntered.focus()

    # saving data after clicking button
    def savedata():
        conn = sqlite3.connect('new_database.db')
        c = conn.cursor()
        c.execute('INSERT INTO items(name) VALUES (?)', (nameEntered.get(),))
        # c.execute('INSERT INTO data VALUES(?)')
        print("saved")
        conn.commit()

        # for displaying table
        query = 'SELECT * FROM items'
        for rows in conn.execute(query):
            print(rows)
        conn.close()
    #ADD Button
    btn1 = Button(add_new_button, text="ADD", fg="red", command=savedata)
    btn1.grid(column=1, row=2)
    def back():
        add_new_button.destroy()
        mai()
    #back button
    btn2 = Button(add_new_button, text="Back", fg='red', command=back)
    btn2.grid(column=0, row=3)

    add_new_button.mainloop()


#Update Existing
def update_existing(inventory_management_window):
    inventory_management_window.destroy()
    update_existing = Tk()
    update_existing.geometry('350x200')
    update_existing.title("Update Existing")
    # Drop down
    conn = sqlite3.connect('new_database.db')
    c = conn.cursor()
    query = "SELECT distinct(name) as class FROM items"
    r_set = conn.execute(query);
    my_list = [r for r, in r_set]
    options = StringVar(update_existing)
    options.set(my_list[0])
    om1 = OptionMenu(update_existing, options, *my_list)
    #om1.grid(column=0, row=0)
    om1.pack()
    options.set("Items")
    #text boxe 1
    def click(event):
        quantityEntered.configure(state=NORMAL)
        quantityEntered.delete(0, END)
    quantity = IntVar()
    quantityEntered = Entry(update_existing, width=15, textvariable=quantity)
    quantityEntered.pack()
    quantityEntered.insert(0, 'Quantity')
    quantityEntered.configure(state=DISABLED)
    quantityEntered.bind("<Button-1>", click)
    #text boxe 2
    def click(event):
        invoicePriceEntered.configure(state=NORMAL)
        invoicePriceEntered.delete(0, END)
    InvoicePrice = IntVar()
    invoicePriceEntered = Entry(update_existing, width=15, textvariable=InvoicePrice)
    invoicePriceEntered.pack()
    invoicePriceEntered.insert(0, 'Invoice Price')
    invoicePriceEntered.configure(state=DISABLED)
    invoicePriceEntered.bind("<Button-1>", click)

    def updatedata():
        conn = sqlite3.connect('new_database.db')
        c = conn.cursor()
        c.execute('UPDATE inventory SET (invoice_price,quantity) = (?,?) WHERE item = ?',(invoicePriceEntered.get(), quantityEntered.get(), options.get()))
        #c.execute('INSERT INTO inventory(invoice_price, quantity, item) VALUES (?, ?,?)', (invoicePriceEntered.get(), quantityEntered.get(), options.get()))
        conn.commit()
        conn.close()
    #ADD Button
    btn1 = Button(update_existing, text="ADD", fg="red", command=updatedata)
    btn1.pack()
    def back():
        update_existing.destroy()
        mai()
    # back button
    btn2 = Button(update_existing, text="Back", command=back)
    btn2.pack(side=LEFT)

    update_existing.mainloop()


#Sale Management
def sale_management_button(window):
    window.destroy()
    sale_management_button = Tk()
    sale_management_button.geometry('350x200')
    sale_management_button.title("Sale Management")
    # Drop down
    Items = ["Chair", "Bed", "Dressing Table", "Dinning Table"]
    variable = StringVar(sale_management_button)
    variable.set("Select Item")
    drop = OptionMenu(sale_management_button, variable, *Items)
    drop.pack()
    # text boxe 1
    def click(event):
        ItemCountEntered.configure(state=NORMAL)
        ItemCountEntered.delete(0, END)
    ItemCount = IntVar()
    ItemCountEntered = Entry(sale_management_button, width=15, textvariable=ItemCount)
    ItemCountEntered.pack()
    ItemCountEntered.insert(0, 'Item Count')
    ItemCountEntered.configure(state=DISABLED)
    ItemCountEntered.bind("<Button-1>", click)
    # text boxe 2
    def click(event):
        UnitPriceEntered.configure(state=NORMAL)
        UnitPriceEntered.delete(0, END)
    UnitPrice = IntVar()
    UnitPriceEntered = Entry(sale_management_button, width=15, textvariable=UnitPrice)
    UnitPriceEntered.pack()
    UnitPriceEntered.insert(0, 'Unit Price')
    UnitPriceEntered.configure(state=DISABLED)
    UnitPriceEntered.bind("<Button-1>", click)
    # ADD Button
    btn1 = Button(sale_management_button, text="ADD", fg="red")
    btn1.pack()
    def back():
        #sale_management_button.destroy()
        drop.destroy()
        ItemCountEntered.destroy()
        UnitPriceEntered.destroy()
        btn1.destroy()
        btn2.destroy()
        sale_management_button.destroy()
        mai()
    # Back Button
    btn2 = Button(sale_management_button, text="Back", fg="red", command=back)
    btn2.pack(side=LEFT)
    #window()
    sale_management_button.mainloop()

#Main Menu
def mai():
    window = Tk()
    window.geometry('350x200')
    window.title("Management Software")
    lbl = Label(window, text="Welcome to  Management Software!")
    lbl.grid(column=0, row=0)
    btn1 = Button(window, text="Inventory Management", fg="red", command=lambda: clickedbtn1(window))
    btn1.grid(column=0, row=1)
    btn2 = Button(window, text="Sales Management", command=lambda :sale_management_button(window))
    btn2.grid(column=0, row=2)

    # for displaying table
    query = 'SELECT * FROM inventory'
    for rows in conn.execute(query):
        print(rows)
    window.mainloop()

mai()

